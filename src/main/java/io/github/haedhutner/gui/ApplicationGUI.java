package io.github.haedhutner.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import io.github.haedhutner.entity.Line;
import io.github.haedhutner.entity.Ticket;
import io.github.haedhutner.entity.Train;
import io.github.haedhutner.gui.lines.CreateOrUpdateTrainLine;
import io.github.haedhutner.gui.lines.DeleteTrainLine;
import io.github.haedhutner.gui.lines.TrainlinesTableModel;
import io.github.haedhutner.gui.trains.CreateOrUpdateTrain;
import io.github.haedhutner.gui.trains.TrainsTableModel;
import io.github.haedhutner.managers.LineManager;
import io.github.haedhutner.managers.TrainManager;

import javax.swing.*;
import java.awt.*;

public class ApplicationGUI extends JFrame {

    private static ApplicationGUI instance = new ApplicationGUI();

    private Train selectedTrain;
    private Line selectedLine;
    private Ticket selectedTicket;

    private JTabbedPane mainTabPanel;

    private JTable trainsTable;
    private JTable trainLinesTable;
    private JTable ticketsTable;

    private JButton buyTicketButton1;
    private JButton cancelTicketButton;
    private JButton updateTicketButton;
    private JButton newTrainButton;
    private JButton updateTrainButton;
    private JButton deleteTrainButton;
    private JButton buyTicketButton;
    private JButton newTrainLineButton1;
    private JButton deleteTrainLineButton;
    private JButton updateTrainLineButton;
    private JButton newTrainButtonFromTrainLine;

    private JPanel mainContentPanel;

    private ApplicationGUI() {
        super.setTitle("Train Tickets");
        super.add(mainContentPanel);
        super.setPreferredSize(new Dimension(800, 600));
        super.setMinimumSize(new Dimension(800, 600));
        super.setVisible(true);
        super.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        TrainManager.getInstance().init();
        LineManager.getInstance().init();

        newTrainLineButton1.addActionListener(event -> CreateOrUpdateTrainLine.create());
        deleteTrainLineButton.addActionListener(event -> {
            if (trainLinesTable.getSelectedRow() == -1 || trainLinesTable.getSelectedColumn() == -1) return;
            TrainlinesTableModel model = (TrainlinesTableModel) trainLinesTable.getModel();
            DeleteTrainLine.open(model.getAt(trainLinesTable.getSelectedRow()));
        });
        updateTrainLineButton.addActionListener(event -> {
            if (trainLinesTable.getSelectedRow() == -1 || trainLinesTable.getSelectedColumn() == -1) return;
            TrainlinesTableModel model = (TrainlinesTableModel) trainLinesTable.getModel();
            Line line = model.getAt(trainLinesTable.getSelectedRow());
            CreateOrUpdateTrainLine.update(line);
        });

        newTrainButton.addActionListener(event -> CreateOrUpdateTrain.create());
        //deleteTrainButton.addActionListener(event -> {
        //    if (trainLinesTable.getSelectedRow() == -1 || trainLinesTable.getSelectedColumn() == -1) return;
        //    TrainlinesTableModel model = (TrainlinesTableModel) trainLinesTable.getModel();
        //    DeleteTrain.open(model.getAt(trainLinesTable.getSelectedRow()));
        //});
        updateTrainButton.addActionListener(event -> {
            if (trainLinesTable.getSelectedRow() == -1 || trainLinesTable.getSelectedColumn() == -1) return;
            TrainsTableModel model = (TrainsTableModel) trainLinesTable.getModel();
            Train train = model.getAt(trainLinesTable.getSelectedRow());
            CreateOrUpdateTrain.update(train);
        });

        updateTables();
    }

    public static ApplicationGUI getInstance() {
        return instance;
    }

    public void updateTables() {
        updateTrainsTable();
        updateLinesTable();
    }

    public JTable getTrainsTable() {
        return trainsTable;
    }

    public JTable getTrainLinesTable() {
        return trainLinesTable;
    }

    public JTable getTicketsTable() {
        return ticketsTable;
    }

    public Train getSelectedTrain() {
        return selectedTrain;
    }

    public Line getSelectedLine() {
        return selectedLine;
    }

    public Ticket getSelectedTicket() {
        return selectedTicket;
    }

    public void updateLinesTable() {
        LineManager.getInstance().mapTo(trainLinesTable);
    }

    public void updateTrainsTable() { TrainManager.getInstance().mapTo(trainsTable); }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainContentPanel = new JPanel();
        mainContentPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainTabPanel = new JTabbedPane();
        mainContentPanel.add(mainTabPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(800, 600), null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainTabPanel.addTab("Trains", panel1);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(5, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        newTrainButton = new JButton();
        newTrainButton.setText("New Train");
        panel2.add(newTrainButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        updateTrainButton = new JButton();
        updateTrainButton.setText("Update Train");
        panel2.add(updateTrainButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        deleteTrainButton = new JButton();
        deleteTrainButton.setText("Delete Train");
        panel2.add(deleteTrainButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buyTicketButton = new JButton();
        buyTicketButton.setText("Buy Ticket");
        panel2.add(buyTicketButton, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        trainsTable = new JTable();
        scrollPane1.setViewportView(trainsTable);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainTabPanel.addTab("Train Lines", panel3);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(5, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel3.add(panel4, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        newTrainLineButton1 = new JButton();
        newTrainLineButton1.setText("New Train Line");
        panel4.add(newTrainLineButton1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel4.add(spacer2, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        deleteTrainLineButton = new JButton();
        deleteTrainLineButton.setText("Delete Train Line");
        panel4.add(deleteTrainLineButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        updateTrainLineButton = new JButton();
        updateTrainLineButton.setText("Update Train Line");
        panel4.add(updateTrainLineButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        newTrainButtonFromTrainLine = new JButton();
        newTrainButtonFromTrainLine.setText("New Train");
        panel4.add(newTrainButtonFromTrainLine, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane2 = new JScrollPane();
        panel3.add(scrollPane2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        trainLinesTable = new JTable();
        scrollPane2.setViewportView(trainLinesTable);
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainTabPanel.addTab("Tickets", panel5);
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel5.add(panel6, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buyTicketButton1 = new JButton();
        buyTicketButton1.setText("Buy Ticket");
        panel6.add(buyTicketButton1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cancelTicketButton = new JButton();
        cancelTicketButton.setText("Cancel Ticket");
        panel6.add(cancelTicketButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        updateTicketButton = new JButton();
        updateTicketButton.setText("Update Ticket");
        panel6.add(updateTicketButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        panel6.add(spacer3, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane3 = new JScrollPane();
        panel5.add(scrollPane3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        ticketsTable = new JTable();
        scrollPane3.setViewportView(ticketsTable);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainContentPanel;
    }
}
